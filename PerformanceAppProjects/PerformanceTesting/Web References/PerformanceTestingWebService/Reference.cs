// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace PerformanceTesting.PerformanceTestingWebService {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="BasicHttpBinding_IPerformanceTestingDataService", Namespace="http://tempuri.org/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PerformanceTestingDataService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindDeviceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindFullDeviceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeviceListOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPerformanceCubeResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPerformanceCubeResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPerformanceCubeResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPerformanceCubeResultsForMonoTouchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPerformanceCubeResultsForObjectiveCOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindPerformanceCubeResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPerformanceMatrixTestResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPerformanceMatrixResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPerformanceMatrixResultsForMonoTouchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPerformanceMatrixResultsForObjectiveCOperationCompleted;
        
        public PerformanceTestingDataService() {
            this.Url = "http://apps.slapholmesproductions.com/apps/PerformanceApp/PerformanceTestingDataService.svc/basic";
        }
        
        public PerformanceTestingDataService(string url) {
            this.Url = url;
        }
        
        public event AddDeviceCompletedEventHandler AddDeviceCompleted;
        
        public event FindDeviceInfoCompletedEventHandler FindDeviceInfoCompleted;
        
        public event FindFullDeviceInfoCompletedEventHandler FindFullDeviceInfoCompleted;
        
        public event GetDeviceListCompletedEventHandler GetDeviceListCompleted;
        
        public event AddPerformanceCubeResultCompletedEventHandler AddPerformanceCubeResultCompleted;
        
        public event AddPerformanceCubeResultsCompletedEventHandler AddPerformanceCubeResultsCompleted;
        
        public event GetPerformanceCubeResultsCompletedEventHandler GetPerformanceCubeResultsCompleted;
        
        public event GetPerformanceCubeResultsForMonoTouchCompletedEventHandler GetPerformanceCubeResultsForMonoTouchCompleted;
        
        public event GetPerformanceCubeResultsForObjectiveCCompletedEventHandler GetPerformanceCubeResultsForObjectiveCCompleted;
        
        public event FindPerformanceCubeResultCompletedEventHandler FindPerformanceCubeResultCompleted;
        
        public event AddPerformanceMatrixTestResultCompletedEventHandler AddPerformanceMatrixTestResultCompleted;
        
        public event GetPerformanceMatrixResultsCompletedEventHandler GetPerformanceMatrixResultsCompleted;
        
        public event GetPerformanceMatrixResultsForMonoTouchCompletedEventHandler GetPerformanceMatrixResultsForMonoTouchCompleted;
        
        public event GetPerformanceMatrixResultsForObjectiveCCompletedEventHandler GetPerformanceMatrixResultsForObjectiveCCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/AddDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int AddDevice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] FullDeviceInfo deviceInfo) {
            object[] results = this.Invoke("AddDevice", new object[] {
                        deviceInfo});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginAddDevice(FullDeviceInfo deviceInfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddDevice", new object[] {
                        deviceInfo}, callback, asyncState);
        }
        
        public int EndAddDevice(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void AddDeviceAsync(FullDeviceInfo deviceInfo) {
            this.AddDeviceAsync(deviceInfo, null);
        }
        
        public void AddDeviceAsync(FullDeviceInfo deviceInfo, object userState) {
            if ((this.AddDeviceOperationCompleted == null)) {
                this.AddDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDeviceCompleted);
            }
            this.InvokeAsync("AddDevice", new object[] {
                        deviceInfo}, this.AddDeviceOperationCompleted, userState);
        }
        
        private void OnAddDeviceCompleted(object arg) {
            if ((this.AddDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDeviceCompleted(this, new AddDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/FindDeviceInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DeviceInfo FindDeviceInfo(int databaseId) {
            object[] results = this.Invoke("FindDeviceInfo", new object[] {
                        databaseId});
            return ((DeviceInfo)(results[0]));
        }
        
        public System.IAsyncResult BeginFindDeviceInfo(int databaseId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindDeviceInfo", new object[] {
                        databaseId}, callback, asyncState);
        }
        
        public DeviceInfo EndFindDeviceInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DeviceInfo)(results[0]));
        }
        
        public void FindDeviceInfoAsync(int databaseId) {
            this.FindDeviceInfoAsync(databaseId, null);
        }
        
        public void FindDeviceInfoAsync(int databaseId, object userState) {
            if ((this.FindDeviceInfoOperationCompleted == null)) {
                this.FindDeviceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindDeviceInfoCompleted);
            }
            this.InvokeAsync("FindDeviceInfo", new object[] {
                        databaseId}, this.FindDeviceInfoOperationCompleted, userState);
        }
        
        private void OnFindDeviceInfoCompleted(object arg) {
            if ((this.FindDeviceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindDeviceInfoCompleted(this, new FindDeviceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/FindFullDeviceInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public FullDeviceInfo FindFullDeviceInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uniqueId) {
            object[] results = this.Invoke("FindFullDeviceInfo", new object[] {
                        uniqueId});
            return ((FullDeviceInfo)(results[0]));
        }
        
        public System.IAsyncResult BeginFindFullDeviceInfo(string uniqueId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindFullDeviceInfo", new object[] {
                        uniqueId}, callback, asyncState);
        }
        
        public FullDeviceInfo EndFindFullDeviceInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FullDeviceInfo)(results[0]));
        }
        
        public void FindFullDeviceInfoAsync(string uniqueId) {
            this.FindFullDeviceInfoAsync(uniqueId, null);
        }
        
        public void FindFullDeviceInfoAsync(string uniqueId, object userState) {
            if ((this.FindFullDeviceInfoOperationCompleted == null)) {
                this.FindFullDeviceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindFullDeviceInfoCompleted);
            }
            this.InvokeAsync("FindFullDeviceInfo", new object[] {
                        uniqueId}, this.FindFullDeviceInfoOperationCompleted, userState);
        }
        
        private void OnFindFullDeviceInfoCompleted(object arg) {
            if ((this.FindFullDeviceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindFullDeviceInfoCompleted(this, new FindFullDeviceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/GetDeviceList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArray(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItem(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebSite")]
        public DeviceInfo[] GetDeviceList() {
            object[] results = this.Invoke("GetDeviceList", new object[0]);
            return ((DeviceInfo[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetDeviceList(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDeviceList", new object[0], callback, asyncState);
        }
        
        public DeviceInfo[] EndGetDeviceList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DeviceInfo[])(results[0]));
        }
        
        public void GetDeviceListAsync() {
            this.GetDeviceListAsync(null);
        }
        
        public void GetDeviceListAsync(object userState) {
            if ((this.GetDeviceListOperationCompleted == null)) {
                this.GetDeviceListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeviceListCompleted);
            }
            this.InvokeAsync("GetDeviceList", new object[0], this.GetDeviceListOperationCompleted, userState);
        }
        
        private void OnGetDeviceListCompleted(object arg) {
            if ((this.GetDeviceListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeviceListCompleted(this, new GetDeviceListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/AddPerformanceCubeResult", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int AddPerformanceCubeResult([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] PerformanceCubeResult result) {
            object[] results = this.Invoke("AddPerformanceCubeResult", new object[] {
                        result});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginAddPerformanceCubeResult(PerformanceCubeResult result, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddPerformanceCubeResult", new object[] {
                        result}, callback, asyncState);
        }
        
        public int EndAddPerformanceCubeResult(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void AddPerformanceCubeResultAsync(PerformanceCubeResult result) {
            this.AddPerformanceCubeResultAsync(result, null);
        }
        
        public void AddPerformanceCubeResultAsync(PerformanceCubeResult result, object userState) {
            if ((this.AddPerformanceCubeResultOperationCompleted == null)) {
                this.AddPerformanceCubeResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPerformanceCubeResultCompleted);
            }
            this.InvokeAsync("AddPerformanceCubeResult", new object[] {
                        result}, this.AddPerformanceCubeResultOperationCompleted, userState);
        }
        
        private void OnAddPerformanceCubeResultCompleted(object arg) {
            if ((this.AddPerformanceCubeResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPerformanceCubeResultCompleted(this, new AddPerformanceCubeResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/AddPerformanceCubeResults", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void AddPerformanceCubeResults([System.Xml.Serialization.XmlArray(IsNullable=true)] [System.Xml.Serialization.XmlArrayItem(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebSite")] PerformanceCubeResult[] results) {
            this.Invoke("AddPerformanceCubeResults", new object[] {
                        results});
        }
        
        public System.IAsyncResult BeginAddPerformanceCubeResults(PerformanceCubeResult[] results, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddPerformanceCubeResults", new object[] {
                        results}, callback, asyncState);
        }
        
        public void EndAddPerformanceCubeResults(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void AddPerformanceCubeResultsAsync(PerformanceCubeResult[] results) {
            this.AddPerformanceCubeResultsAsync(results, null);
        }
        
        public void AddPerformanceCubeResultsAsync(PerformanceCubeResult[] results, object userState) {
            if ((this.AddPerformanceCubeResultsOperationCompleted == null)) {
                this.AddPerformanceCubeResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPerformanceCubeResultsCompleted);
            }
            this.InvokeAsync("AddPerformanceCubeResults", new object[] {
                        results}, this.AddPerformanceCubeResultsOperationCompleted, userState);
        }
        
        private void OnAddPerformanceCubeResultsCompleted(object arg) {
            if ((this.AddPerformanceCubeResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPerformanceCubeResultsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/GetPerformanceCubeResults", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArray(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItem(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebSite")]
        public PerformanceCubeResult[] GetPerformanceCubeResults() {
            object[] results = this.Invoke("GetPerformanceCubeResults", new object[0]);
            return ((PerformanceCubeResult[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetPerformanceCubeResults(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPerformanceCubeResults", new object[0], callback, asyncState);
        }
        
        public PerformanceCubeResult[] EndGetPerformanceCubeResults(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PerformanceCubeResult[])(results[0]));
        }
        
        public void GetPerformanceCubeResultsAsync() {
            this.GetPerformanceCubeResultsAsync(null);
        }
        
        public void GetPerformanceCubeResultsAsync(object userState) {
            if ((this.GetPerformanceCubeResultsOperationCompleted == null)) {
                this.GetPerformanceCubeResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPerformanceCubeResultsCompleted);
            }
            this.InvokeAsync("GetPerformanceCubeResults", new object[0], this.GetPerformanceCubeResultsOperationCompleted, userState);
        }
        
        private void OnGetPerformanceCubeResultsCompleted(object arg) {
            if ((this.GetPerformanceCubeResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPerformanceCubeResultsCompleted(this, new GetPerformanceCubeResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/GetPerformanceCubeResultsForMonoTouch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArray(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItem(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebSite")]
        public PerformanceCubeResult[] GetPerformanceCubeResultsForMonoTouch() {
            object[] results = this.Invoke("GetPerformanceCubeResultsForMonoTouch", new object[0]);
            return ((PerformanceCubeResult[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetPerformanceCubeResultsForMonoTouch(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPerformanceCubeResultsForMonoTouch", new object[0], callback, asyncState);
        }
        
        public PerformanceCubeResult[] EndGetPerformanceCubeResultsForMonoTouch(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PerformanceCubeResult[])(results[0]));
        }
        
        public void GetPerformanceCubeResultsForMonoTouchAsync() {
            this.GetPerformanceCubeResultsForMonoTouchAsync(null);
        }
        
        public void GetPerformanceCubeResultsForMonoTouchAsync(object userState) {
            if ((this.GetPerformanceCubeResultsForMonoTouchOperationCompleted == null)) {
                this.GetPerformanceCubeResultsForMonoTouchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPerformanceCubeResultsForMonoTouchCompleted);
            }
            this.InvokeAsync("GetPerformanceCubeResultsForMonoTouch", new object[0], this.GetPerformanceCubeResultsForMonoTouchOperationCompleted, userState);
        }
        
        private void OnGetPerformanceCubeResultsForMonoTouchCompleted(object arg) {
            if ((this.GetPerformanceCubeResultsForMonoTouchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPerformanceCubeResultsForMonoTouchCompleted(this, new GetPerformanceCubeResultsForMonoTouchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/GetPerformanceCubeResultsForObjectiveC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArray(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItem(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebSite")]
        public PerformanceCubeResult[] GetPerformanceCubeResultsForObjectiveC() {
            object[] results = this.Invoke("GetPerformanceCubeResultsForObjectiveC", new object[0]);
            return ((PerformanceCubeResult[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetPerformanceCubeResultsForObjectiveC(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPerformanceCubeResultsForObjectiveC", new object[0], callback, asyncState);
        }
        
        public PerformanceCubeResult[] EndGetPerformanceCubeResultsForObjectiveC(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PerformanceCubeResult[])(results[0]));
        }
        
        public void GetPerformanceCubeResultsForObjectiveCAsync() {
            this.GetPerformanceCubeResultsForObjectiveCAsync(null);
        }
        
        public void GetPerformanceCubeResultsForObjectiveCAsync(object userState) {
            if ((this.GetPerformanceCubeResultsForObjectiveCOperationCompleted == null)) {
                this.GetPerformanceCubeResultsForObjectiveCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPerformanceCubeResultsForObjectiveCCompleted);
            }
            this.InvokeAsync("GetPerformanceCubeResultsForObjectiveC", new object[0], this.GetPerformanceCubeResultsForObjectiveCOperationCompleted, userState);
        }
        
        private void OnGetPerformanceCubeResultsForObjectiveCCompleted(object arg) {
            if ((this.GetPerformanceCubeResultsForObjectiveCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPerformanceCubeResultsForObjectiveCCompleted(this, new GetPerformanceCubeResultsForObjectiveCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/FindPerformanceCubeResult", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public PerformanceCubeResult FindPerformanceCubeResult(int id) {
            object[] results = this.Invoke("FindPerformanceCubeResult", new object[] {
                        id});
            return ((PerformanceCubeResult)(results[0]));
        }
        
        public System.IAsyncResult BeginFindPerformanceCubeResult(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindPerformanceCubeResult", new object[] {
                        id}, callback, asyncState);
        }
        
        public PerformanceCubeResult EndFindPerformanceCubeResult(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PerformanceCubeResult)(results[0]));
        }
        
        public void FindPerformanceCubeResultAsync(int id) {
            this.FindPerformanceCubeResultAsync(id, null);
        }
        
        public void FindPerformanceCubeResultAsync(int id, object userState) {
            if ((this.FindPerformanceCubeResultOperationCompleted == null)) {
                this.FindPerformanceCubeResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindPerformanceCubeResultCompleted);
            }
            this.InvokeAsync("FindPerformanceCubeResult", new object[] {
                        id}, this.FindPerformanceCubeResultOperationCompleted, userState);
        }
        
        private void OnFindPerformanceCubeResultCompleted(object arg) {
            if ((this.FindPerformanceCubeResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindPerformanceCubeResultCompleted(this, new FindPerformanceCubeResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/AddPerformanceMatrixTestResult", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int AddPerformanceMatrixTestResult([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] MatrixTestResult result) {
            object[] results = this.Invoke("AddPerformanceMatrixTestResult", new object[] {
                        result});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginAddPerformanceMatrixTestResult(MatrixTestResult result, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddPerformanceMatrixTestResult", new object[] {
                        result}, callback, asyncState);
        }
        
        public int EndAddPerformanceMatrixTestResult(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void AddPerformanceMatrixTestResultAsync(MatrixTestResult result) {
            this.AddPerformanceMatrixTestResultAsync(result, null);
        }
        
        public void AddPerformanceMatrixTestResultAsync(MatrixTestResult result, object userState) {
            if ((this.AddPerformanceMatrixTestResultOperationCompleted == null)) {
                this.AddPerformanceMatrixTestResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPerformanceMatrixTestResultCompleted);
            }
            this.InvokeAsync("AddPerformanceMatrixTestResult", new object[] {
                        result}, this.AddPerformanceMatrixTestResultOperationCompleted, userState);
        }
        
        private void OnAddPerformanceMatrixTestResultCompleted(object arg) {
            if ((this.AddPerformanceMatrixTestResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPerformanceMatrixTestResultCompleted(this, new AddPerformanceMatrixTestResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/GetPerformanceMatrixResults", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArray(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItem(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebSite")]
        public MatrixTestResult[] GetPerformanceMatrixResults() {
            object[] results = this.Invoke("GetPerformanceMatrixResults", new object[0]);
            return ((MatrixTestResult[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetPerformanceMatrixResults(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPerformanceMatrixResults", new object[0], callback, asyncState);
        }
        
        public MatrixTestResult[] EndGetPerformanceMatrixResults(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MatrixTestResult[])(results[0]));
        }
        
        public void GetPerformanceMatrixResultsAsync() {
            this.GetPerformanceMatrixResultsAsync(null);
        }
        
        public void GetPerformanceMatrixResultsAsync(object userState) {
            if ((this.GetPerformanceMatrixResultsOperationCompleted == null)) {
                this.GetPerformanceMatrixResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPerformanceMatrixResultsCompleted);
            }
            this.InvokeAsync("GetPerformanceMatrixResults", new object[0], this.GetPerformanceMatrixResultsOperationCompleted, userState);
        }
        
        private void OnGetPerformanceMatrixResultsCompleted(object arg) {
            if ((this.GetPerformanceMatrixResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPerformanceMatrixResultsCompleted(this, new GetPerformanceMatrixResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/GetPerformanceMatrixResultsForMonoTouch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArray(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItem(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebSite")]
        public MatrixTestResult[] GetPerformanceMatrixResultsForMonoTouch() {
            object[] results = this.Invoke("GetPerformanceMatrixResultsForMonoTouch", new object[0]);
            return ((MatrixTestResult[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetPerformanceMatrixResultsForMonoTouch(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPerformanceMatrixResultsForMonoTouch", new object[0], callback, asyncState);
        }
        
        public MatrixTestResult[] EndGetPerformanceMatrixResultsForMonoTouch(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MatrixTestResult[])(results[0]));
        }
        
        public void GetPerformanceMatrixResultsForMonoTouchAsync() {
            this.GetPerformanceMatrixResultsForMonoTouchAsync(null);
        }
        
        public void GetPerformanceMatrixResultsForMonoTouchAsync(object userState) {
            if ((this.GetPerformanceMatrixResultsForMonoTouchOperationCompleted == null)) {
                this.GetPerformanceMatrixResultsForMonoTouchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPerformanceMatrixResultsForMonoTouchCompleted);
            }
            this.InvokeAsync("GetPerformanceMatrixResultsForMonoTouch", new object[0], this.GetPerformanceMatrixResultsForMonoTouchOperationCompleted, userState);
        }
        
        private void OnGetPerformanceMatrixResultsForMonoTouchCompleted(object arg) {
            if ((this.GetPerformanceMatrixResultsForMonoTouchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPerformanceMatrixResultsForMonoTouchCompleted(this, new GetPerformanceMatrixResultsForMonoTouchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/GetPerformanceMatrixResultsForObjectiveC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArray(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItem(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebSite")]
        public MatrixTestResult[] GetPerformanceMatrixResultsForObjectiveC() {
            object[] results = this.Invoke("GetPerformanceMatrixResultsForObjectiveC", new object[0]);
            return ((MatrixTestResult[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetPerformanceMatrixResultsForObjectiveC(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPerformanceMatrixResultsForObjectiveC", new object[0], callback, asyncState);
        }
        
        public MatrixTestResult[] EndGetPerformanceMatrixResultsForObjectiveC(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MatrixTestResult[])(results[0]));
        }
        
        public void GetPerformanceMatrixResultsForObjectiveCAsync() {
            this.GetPerformanceMatrixResultsForObjectiveCAsync(null);
        }
        
        public void GetPerformanceMatrixResultsForObjectiveCAsync(object userState) {
            if ((this.GetPerformanceMatrixResultsForObjectiveCOperationCompleted == null)) {
                this.GetPerformanceMatrixResultsForObjectiveCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPerformanceMatrixResultsForObjectiveCCompleted);
            }
            this.InvokeAsync("GetPerformanceMatrixResultsForObjectiveC", new object[0], this.GetPerformanceMatrixResultsForObjectiveCOperationCompleted, userState);
        }
        
        private void OnGetPerformanceMatrixResultsForObjectiveCCompleted(object arg) {
            if ((this.GetPerformanceMatrixResultsForObjectiveCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPerformanceMatrixResultsForObjectiveCCompleted(this, new GetPerformanceMatrixResultsForObjectiveCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebSite")]
    public partial class FullDeviceInfo {
        
        /// <remarks/>
        public int DatabaseId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool DatabaseIdSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ModelName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OSName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OSVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OwnerName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SpecificHWVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SystemName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string UIIdion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string UniqueId;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebSite")]
    public partial class DeviceInfo {
        
        /// <remarks/>
        public int DatabaseId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool DatabaseIdSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ModelName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OSName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OSVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SpecificHWVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string UIIdion;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebSite")]
    public partial class PerformanceCubeResult {
        
        /// <remarks/>
        public int DatabaseId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool DatabaseIdSpecified;
        
        /// <remarks/>
        public int DeviceDatabaseId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool DeviceDatabaseIdSpecified;
        
        /// <remarks/>
        public double FramesPerSecond;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool FramesPerSecondSpecified;
        
        /// <remarks/>
        public bool IsMonoTouch;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool IsMonoTouchSpecified;
        
        /// <remarks/>
        public int NumberOfTriangles;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool NumberOfTrianglesSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebSite")]
    public partial class MatrixTestResult {
        
        /// <remarks/>
        public double BLASTestResult;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool BLASTestResultSpecified;
        
        /// <remarks/>
        public double CSTestResult;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool CSTestResultSpecified;
        
        /// <remarks/>
        public double CTestResult;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool CTestResultSpecified;
        
        /// <remarks/>
        public int DatabaseId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool DatabaseIdSpecified;
        
        /// <remarks/>
        public int DeviceDatabaseId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool DeviceDatabaseIdSpecified;
        
        /// <remarks/>
        public bool IsMonoTouch;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool IsMonoTouchSpecified;
    }
    
    public partial class AddDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void AddDeviceCompletedEventHandler(object sender, AddDeviceCompletedEventArgs args);
    
    public partial class FindDeviceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindDeviceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DeviceInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DeviceInfo)(this.results[0]));
            }
        }
    }
    
    public delegate void FindDeviceInfoCompletedEventHandler(object sender, FindDeviceInfoCompletedEventArgs args);
    
    public partial class FindFullDeviceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindFullDeviceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public FullDeviceInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FullDeviceInfo)(this.results[0]));
            }
        }
    }
    
    public delegate void FindFullDeviceInfoCompletedEventHandler(object sender, FindFullDeviceInfoCompletedEventArgs args);
    
    public partial class GetDeviceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeviceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DeviceInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DeviceInfo[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetDeviceListCompletedEventHandler(object sender, GetDeviceListCompletedEventArgs args);
    
    public partial class AddPerformanceCubeResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPerformanceCubeResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void AddPerformanceCubeResultCompletedEventHandler(object sender, AddPerformanceCubeResultCompletedEventArgs args);
    
    public delegate void AddPerformanceCubeResultsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public partial class GetPerformanceCubeResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPerformanceCubeResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PerformanceCubeResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PerformanceCubeResult[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetPerformanceCubeResultsCompletedEventHandler(object sender, GetPerformanceCubeResultsCompletedEventArgs args);
    
    public partial class GetPerformanceCubeResultsForMonoTouchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPerformanceCubeResultsForMonoTouchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PerformanceCubeResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PerformanceCubeResult[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetPerformanceCubeResultsForMonoTouchCompletedEventHandler(object sender, GetPerformanceCubeResultsForMonoTouchCompletedEventArgs args);
    
    public partial class GetPerformanceCubeResultsForObjectiveCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPerformanceCubeResultsForObjectiveCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PerformanceCubeResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PerformanceCubeResult[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetPerformanceCubeResultsForObjectiveCCompletedEventHandler(object sender, GetPerformanceCubeResultsForObjectiveCCompletedEventArgs args);
    
    public partial class FindPerformanceCubeResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindPerformanceCubeResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PerformanceCubeResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PerformanceCubeResult)(this.results[0]));
            }
        }
    }
    
    public delegate void FindPerformanceCubeResultCompletedEventHandler(object sender, FindPerformanceCubeResultCompletedEventArgs args);
    
    public partial class AddPerformanceMatrixTestResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPerformanceMatrixTestResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void AddPerformanceMatrixTestResultCompletedEventHandler(object sender, AddPerformanceMatrixTestResultCompletedEventArgs args);
    
    public partial class GetPerformanceMatrixResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPerformanceMatrixResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MatrixTestResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MatrixTestResult[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetPerformanceMatrixResultsCompletedEventHandler(object sender, GetPerformanceMatrixResultsCompletedEventArgs args);
    
    public partial class GetPerformanceMatrixResultsForMonoTouchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPerformanceMatrixResultsForMonoTouchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MatrixTestResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MatrixTestResult[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetPerformanceMatrixResultsForMonoTouchCompletedEventHandler(object sender, GetPerformanceMatrixResultsForMonoTouchCompletedEventArgs args);
    
    public partial class GetPerformanceMatrixResultsForObjectiveCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPerformanceMatrixResultsForObjectiveCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MatrixTestResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MatrixTestResult[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetPerformanceMatrixResultsForObjectiveCCompletedEventHandler(object sender, GetPerformanceMatrixResultsForObjectiveCCompletedEventArgs args);
}
