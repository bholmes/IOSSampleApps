// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace PerformanceTesting.PerformanceTestingWebService {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="BasicHttpBinding_IPerformanceTestingDataService", Namespace="http://tempuri.org/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PerformanceTestingDataService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindDeviceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeviceListOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPerformanceCubeResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPerformanceCubeResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPerformanceCubeResultsOperationCompleted;
        
        public PerformanceTestingDataService() {
            this.Url = "http://apps.slapholmesproductions.com/apps/PerformanceTesting/Service.svc/basic";
        }
        
        public PerformanceTestingDataService(string url) {
            this.Url = url;
        }
        
        public event AddDeviceCompletedEventHandler AddDeviceCompleted;
        
        public event FindDeviceInfoCompletedEventHandler FindDeviceInfoCompleted;
        
        public event GetDeviceListCompletedEventHandler GetDeviceListCompleted;
        
        public event AddPerformanceCubeResultCompletedEventHandler AddPerformanceCubeResultCompleted;
        
        public event AddPerformanceCubeResultsCompletedEventHandler AddPerformanceCubeResultsCompleted;
        
        public event GetPerformanceCubeResultsCompletedEventHandler GetPerformanceCubeResultsCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/AddDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int AddDevice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] FullDeviceInfo deviceInfo) {
            object[] results = this.Invoke("AddDevice", new object[] {
                        deviceInfo});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginAddDevice(FullDeviceInfo deviceInfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddDevice", new object[] {
                        deviceInfo}, callback, asyncState);
        }
        
        public int EndAddDevice(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void AddDeviceAsync(FullDeviceInfo deviceInfo) {
            this.AddDeviceAsync(deviceInfo, null);
        }
        
        public void AddDeviceAsync(FullDeviceInfo deviceInfo, object userState) {
            if ((this.AddDeviceOperationCompleted == null)) {
                this.AddDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDeviceCompleted);
            }
            this.InvokeAsync("AddDevice", new object[] {
                        deviceInfo}, this.AddDeviceOperationCompleted, userState);
        }
        
        private void OnAddDeviceCompleted(object arg) {
            if ((this.AddDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDeviceCompleted(this, new AddDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/FindDeviceInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DeviceInfo FindDeviceInfo(int databaseId) {
            object[] results = this.Invoke("FindDeviceInfo", new object[] {
                        databaseId});
            return ((DeviceInfo)(results[0]));
        }
        
        public System.IAsyncResult BeginFindDeviceInfo(int databaseId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindDeviceInfo", new object[] {
                        databaseId}, callback, asyncState);
        }
        
        public DeviceInfo EndFindDeviceInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DeviceInfo)(results[0]));
        }
        
        public void FindDeviceInfoAsync(int databaseId) {
            this.FindDeviceInfoAsync(databaseId, null);
        }
        
        public void FindDeviceInfoAsync(int databaseId, object userState) {
            if ((this.FindDeviceInfoOperationCompleted == null)) {
                this.FindDeviceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindDeviceInfoCompleted);
            }
            this.InvokeAsync("FindDeviceInfo", new object[] {
                        databaseId}, this.FindDeviceInfoOperationCompleted, userState);
        }
        
        private void OnFindDeviceInfoCompleted(object arg) {
            if ((this.FindDeviceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindDeviceInfoCompleted(this, new FindDeviceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/GetDeviceList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArray(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItem(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebApp")]
        public DeviceInfo[] GetDeviceList() {
            object[] results = this.Invoke("GetDeviceList", new object[0]);
            return ((DeviceInfo[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetDeviceList(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDeviceList", new object[0], callback, asyncState);
        }
        
        public DeviceInfo[] EndGetDeviceList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DeviceInfo[])(results[0]));
        }
        
        public void GetDeviceListAsync() {
            this.GetDeviceListAsync(null);
        }
        
        public void GetDeviceListAsync(object userState) {
            if ((this.GetDeviceListOperationCompleted == null)) {
                this.GetDeviceListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeviceListCompleted);
            }
            this.InvokeAsync("GetDeviceList", new object[0], this.GetDeviceListOperationCompleted, userState);
        }
        
        private void OnGetDeviceListCompleted(object arg) {
            if ((this.GetDeviceListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeviceListCompleted(this, new GetDeviceListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/AddPerformanceCubeResult", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int AddPerformanceCubeResult([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] PerformanceCubeResult result) {
            object[] results = this.Invoke("AddPerformanceCubeResult", new object[] {
                        result});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginAddPerformanceCubeResult(PerformanceCubeResult result, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddPerformanceCubeResult", new object[] {
                        result}, callback, asyncState);
        }
        
        public int EndAddPerformanceCubeResult(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void AddPerformanceCubeResultAsync(PerformanceCubeResult result) {
            this.AddPerformanceCubeResultAsync(result, null);
        }
        
        public void AddPerformanceCubeResultAsync(PerformanceCubeResult result, object userState) {
            if ((this.AddPerformanceCubeResultOperationCompleted == null)) {
                this.AddPerformanceCubeResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPerformanceCubeResultCompleted);
            }
            this.InvokeAsync("AddPerformanceCubeResult", new object[] {
                        result}, this.AddPerformanceCubeResultOperationCompleted, userState);
        }
        
        private void OnAddPerformanceCubeResultCompleted(object arg) {
            if ((this.AddPerformanceCubeResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPerformanceCubeResultCompleted(this, new AddPerformanceCubeResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/AddPerformanceCubeResults", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void AddPerformanceCubeResults([System.Xml.Serialization.XmlArray(IsNullable=true)] [System.Xml.Serialization.XmlArrayItem(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebApp")] PerformanceCubeResult[] results) {
            this.Invoke("AddPerformanceCubeResults", new object[] {
                        results});
        }
        
        public System.IAsyncResult BeginAddPerformanceCubeResults(PerformanceCubeResult[] results, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddPerformanceCubeResults", new object[] {
                        results}, callback, asyncState);
        }
        
        public void EndAddPerformanceCubeResults(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void AddPerformanceCubeResultsAsync(PerformanceCubeResult[] results) {
            this.AddPerformanceCubeResultsAsync(results, null);
        }
        
        public void AddPerformanceCubeResultsAsync(PerformanceCubeResult[] results, object userState) {
            if ((this.AddPerformanceCubeResultsOperationCompleted == null)) {
                this.AddPerformanceCubeResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPerformanceCubeResultsCompleted);
            }
            this.InvokeAsync("AddPerformanceCubeResults", new object[] {
                        results}, this.AddPerformanceCubeResultsOperationCompleted, userState);
        }
        
        private void OnAddPerformanceCubeResultsCompleted(object arg) {
            if ((this.AddPerformanceCubeResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPerformanceCubeResultsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPerformanceTestingDataService/GetPerformanceCubeResults", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArray(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItem(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebApp")]
        public PerformanceCubeResult[] GetPerformanceCubeResults() {
            object[] results = this.Invoke("GetPerformanceCubeResults", new object[0]);
            return ((PerformanceCubeResult[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetPerformanceCubeResults(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPerformanceCubeResults", new object[0], callback, asyncState);
        }
        
        public PerformanceCubeResult[] EndGetPerformanceCubeResults(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PerformanceCubeResult[])(results[0]));
        }
        
        public void GetPerformanceCubeResultsAsync() {
            this.GetPerformanceCubeResultsAsync(null);
        }
        
        public void GetPerformanceCubeResultsAsync(object userState) {
            if ((this.GetPerformanceCubeResultsOperationCompleted == null)) {
                this.GetPerformanceCubeResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPerformanceCubeResultsCompleted);
            }
            this.InvokeAsync("GetPerformanceCubeResults", new object[0], this.GetPerformanceCubeResultsOperationCompleted, userState);
        }
        
        private void OnGetPerformanceCubeResultsCompleted(object arg) {
            if ((this.GetPerformanceCubeResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPerformanceCubeResultsCompleted(this, new GetPerformanceCubeResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebApp")]
    public partial class FullDeviceInfo {
        
        /// <remarks/>
        public int DatabaseId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool DatabaseIdSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ModelName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OSName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OSVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OwnerName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SpecificHWVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SystemName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string UIIdion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string UniqueId;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebApp")]
    public partial class DeviceInfo {
        
        /// <remarks/>
        public int DatabaseId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool DatabaseIdSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ModelName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OSName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OSVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SpecificHWVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string UIIdion;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/PerformanceTestingWebApp")]
    public partial class PerformanceCubeResult {
        
        /// <remarks/>
        public int DatabaseId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool DatabaseIdSpecified;
        
        /// <remarks/>
        public int DeviceDatabaseId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool DeviceDatabaseIdSpecified;
        
        /// <remarks/>
        public double FramesPerSecond;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool FramesPerSecondSpecified;
        
        /// <remarks/>
        public int NumberOfTriangles;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool NumberOfTrianglesSpecified;
    }
    
    public partial class AddDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void AddDeviceCompletedEventHandler(object sender, AddDeviceCompletedEventArgs args);
    
    public partial class FindDeviceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindDeviceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DeviceInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DeviceInfo)(this.results[0]));
            }
        }
    }
    
    public delegate void FindDeviceInfoCompletedEventHandler(object sender, FindDeviceInfoCompletedEventArgs args);
    
    public partial class GetDeviceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeviceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DeviceInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DeviceInfo[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetDeviceListCompletedEventHandler(object sender, GetDeviceListCompletedEventArgs args);
    
    public partial class AddPerformanceCubeResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPerformanceCubeResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void AddPerformanceCubeResultCompletedEventHandler(object sender, AddPerformanceCubeResultCompletedEventArgs args);
    
    public delegate void AddPerformanceCubeResultsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public partial class GetPerformanceCubeResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPerformanceCubeResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PerformanceCubeResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PerformanceCubeResult[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetPerformanceCubeResultsCompletedEventHandler(object sender, GetPerformanceCubeResultsCompletedEventArgs args);
}
